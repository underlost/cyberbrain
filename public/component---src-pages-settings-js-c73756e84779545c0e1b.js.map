{"version":3,"sources":["webpack:///./src/components/SiteFields.js","webpack:///./src/components/LoginWrapper.js","webpack:///./src/pages/settings.js"],"names":["AddFieldNameForm","addFieldName","useState","value","setValue","key","setKey","onSubmit","e","preventDefault","className","id","onChange","target","selected","getCurrentFields","fields","map","fieldname","index","text","type","placeholder","SiteFields","fieldNamesState","setfieldNamesState","useEffect","getCurrentSiteFields","console","log","removeFieldName","newfieldNamesState","splice","saveFields","updateSiteFields","guid","getCurrentUser","FieldNamesInput","disabled","onClick","removeremoveFieldName","createGUID","LogginWrapper","children","isLoggedIn","navigate","SettingsPage","siteName","siteAPI","siteNameState","setSiteNameState","siteAPIState","setSiteAPIState","title","method","event","updateUser","handleSubmit","name"],"mappings":"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","file":"component---src-pages-settings-js-c73756e84779545c0e1b.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { getCurrentUser, updateSiteFields, getCurrentFields, getCurrentSiteFields, createGUID } from '../util/storage'\n\n// eslint-disable-next-line react/prop-types\nfunction AddFieldNameForm({ addFieldName }) {\n  const [value, setValue] = useState(``)\n  const [key, setKey] = useState(``)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (!value) {\n      return\n    }\n    addFieldName(key, value)\n    setValue(``)\n    setKey(``)\n  }\n  return (\n    <form onSubmit={handleSubmit} className=\"mb-4\">\n      <div className=\"row mb-2\">\n        <div className=\"col-4\">\n          <div className=\"input-group mb-3\">\n            <select className=\"custom-select\" id=\"inputGroupSelect01\" onChange={e => setKey(e.target.value)}>\n              <option selected>Key</option>\n              {getCurrentFields().fields\n                ? getCurrentFields().fields.map((fieldname, index) => (\n                  <option key={index} index={index} value={fieldname.text}>\n                    {fieldname.text}\n                  </option>\n                ))\n                : null}\n            </select>\n          </div>\n        </div>\n        <div className=\"col-8\">\n          <input type=\"text\" className=\"input form-control\" value={value} placeholder=\"Value\" onChange={e => setValue(e.target.value)} />\n        </div>\n      </div>\n\n      <button className=\"btn btn-primary btn-block text-uppercase\">Add new custom Field</button>\n    </form>\n  )\n}\n\nconst SiteFields = () => {\n  const [fieldNamesState, setfieldNamesState] = useState([])\n\n  useEffect(() => {\n    if (getCurrentSiteFields().fields) {\n      setfieldNamesState(getCurrentSiteFields().fields)\n    }\n  }, [])\n\n  console.log(getCurrentSiteFields().fields)\n\n  const addFieldName = (key, value) => {\n    const guid = createGUID()\n    const newfieldNamesState = [\n      ...fieldNamesState,\n      {\n        key,\n        value,\n        guid,\n      },\n    ]\n    setfieldNamesState(newfieldNamesState)\n  }\n\n  const removeFieldName = (index) => {\n    const newfieldNamesState = [...fieldNamesState]\n    newfieldNamesState.splice(index, 1)\n    setfieldNamesState(newfieldNamesState)\n  }\n\n  const saveFields = (e) => {\n    e.preventDefault()\n    updateSiteFields({\n      guid: getCurrentUser().guid,\n      fields: fieldNamesState,\n    })\n  }\n\n  const FieldNamesInput = ({ fieldname, index }) => (\n    <div className=\"row mb-4\">\n      <div className=\"col-3\">\n        <input type=\"text\" className=\"input form-control\" value={fieldname.key} disabled />\n      </div>\n      <div className=\"col-7\">\n        <input type=\"text\" className=\"input form-control\" value={fieldname.value} onChange={saveFields} disabled />\n      </div>\n      <div className=\"col-2\">\n        <button className=\"btn btn-block btn-warning\" onClick={() => removeFieldName(index)}>\n          x\n        </button>\n      </div>\n    </div>\n  )\n\n  return (\n    <>\n      <h6 className=\"h6 text-uppercase\">Current Site Fields</h6>\n      {fieldNamesState ? fieldNamesState.map((fieldname, index) => <FieldNamesInput key={index} index={index} fieldname={fieldname} removeremoveFieldName={removeFieldName} />) : null}\n      <h6>Add New Field</h6>\n      <AddFieldNameForm addFieldName={addFieldName} />\n      <form onSubmit={saveFields}>\n        <button className=\"btn btn-primary btn-block ttext-uppercase\">Save Fields</button>\n      </form>\n    </>\n  )\n}\n\nexport default SiteFields\n\nSiteFields.propTypes = {\n  fieldname: PropTypes.string,\n  index: PropTypes.integer,\n  AddFieldNameForm: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isLoggedIn } from '../util/storage'\nimport { navigate } from 'gatsby'\n\nconst LogginWrapper = ({ children }) => {\n  if (isLoggedIn()) {\n    return <div className=\"loggedIn\">{children}</div>\n  } else {\n    navigate(`/login`)\n    return null\n  }\n}\n\nLogginWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default LogginWrapper\n","import React, { useState } from 'react'\n\nimport Layout from '../components/layout'\nimport LoginWrapper from '../components/LoginWrapper'\nimport SiteFields from '../components/SiteFields'\nimport SEO from '../components/seo'\nimport { getCurrentUser, updateUser } from '../util/storage'\n\nconst SettingsPage = () => {\n  const siteName = getCurrentUser().siteName\n  const siteAPI = getCurrentUser().siteAPI\n  const [siteNameState, setSiteNameState] = useState(siteName)\n  const [siteAPIState, setSiteAPIState] = useState(siteAPI)\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    updateUser({\n      guid: getCurrentUser().guid,\n      siteName: siteNameState,\n      siteAPI: siteAPIState,\n    })\n  }\n\n  return (\n    <LoginWrapper>\n      <Layout>\n        <SEO title=\"Site Settings\" />\n        <form\n          className={`form`}\n          method=\"post\"\n          onSubmit={(event) => {\n            handleSubmit(event)\n            //navigate(`/`)\n          }}>\n          <div className=\"form-group\">\n            <label className={`label d-block`}>\n              URL\n              <input className={`form-control`} type=\"text\" name=\"siteName\" value={siteNameState} onChange={event => setSiteNameState(event.target.value)} />\n            </label>\n          </div>\n          <div className=\"form-group\">\n            <label className={`label d-block`}>\n              API Key\n              <input className={`form-control`} type=\"text\" name=\"siteAPI\" value={siteAPIState} onChange={event => setSiteAPIState(event.target.value)} />\n            </label>\n          </div>\n          <input className={`btn btn-block btn-primary text-uppercase`} type=\"submit\" value=\"Update Settings\" />\n        </form>\n\n        <hr />\n\n        <SiteFields />\n      </Layout>\n    </LoginWrapper>\n  )\n}\n\nexport default SettingsPage\n"],"sourceRoot":""}