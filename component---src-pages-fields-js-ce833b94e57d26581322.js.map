{"version":3,"sources":["webpack:///./src/components/FieldNames.js","webpack:///./src/pages/fields.js","webpack:///./src/components/Nav.js","webpack:///./src/components/LoginWrapper.js"],"names":["AddFieldNameForm","addFieldName","useState","value","setValue","className","onSubmit","e","preventDefault","type","placeholder","onChange","target","FieldNames","fieldNamesState","setfieldNamesState","useEffect","getCurrentFields","fields","console","log","removeFieldName","index","newfieldNamesState","splice","saveFields","updateFields","guid","getCurrentUser","FieldNamesInput","fieldname","text","disabled","onClick","map","key","removeremoveFieldName","createGUID","FieldsPage","LoginWrapper","title","Nav","role","to","LogginWrapper","children","menuState","setMenuState","isLoggedIn","id","data-target","state","window","navigate"],"mappings":"6KAKA,SAASA,EAAT,GAA6C,IAAjBC,EAAgB,EAAhBA,aAAgB,EAChBC,mBAAS,IAA5BC,EADmC,KAC5BC,EAD4B,KAY1C,OACE,0BAAMC,UAAU,OAAOC,SAVJ,SAACC,GACpBA,EAAEC,iBACGL,IAGLF,EAAaE,GACbC,EAAS,OAKP,yBAAKC,UAAU,cACb,2BAAOI,KAAK,OAAOJ,UAAU,qBAAqBK,YAAY,UAAUP,MAAOA,EAAOQ,SAAU,SAAAJ,GAAC,OAAIH,EAASG,EAAEK,OAAOT,WAEzH,4BAAQE,UAAU,4CAAlB,uBAKN,IA8DeQ,EA9DI,WAAO,IAAD,EACuBX,mBAAS,IAAhDY,EADgB,KACCC,EADD,KAEvBC,qBAAU,WACJC,cAAmBC,QACrBH,EAAmBE,cAAmBC,UAEvC,IAEHC,QAAQC,IAAIN,GAEZ,IAMMO,EAAkB,SAACC,GACvB,IAAMC,EAAkB,YAAOT,GAC/BS,EAAmBC,OAAOF,EAAO,GACjCP,EAAmBQ,IAGfE,EAAa,SAAClB,GAClBA,EAAEC,iBACFkB,YAAa,CACXC,KAAMC,cAAiBD,KACvBT,OAAQJ,KAINe,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWR,EAAd,EAAcA,MAAd,OACtB,yBAAKjB,UAAU,kBACb,yBAAKA,UAAU,UACb,2BAAOA,UAAU,eAAeF,MAAO2B,EAAUC,KAAMpB,SAAUc,EAAYO,UAAQ,KAEvF,yBAAK3B,UAAU,SACb,4BAAQA,UAAU,2BAA2B4B,QAAS,kBAAMZ,EAAgBC,KAA5E,QAON,OACE,oCACE,2CACCR,EAAkBA,EAAgBoB,KAAI,SAACJ,EAAWR,GAAZ,OAAsB,kBAACO,EAAD,CAAiBM,IAAKb,EAAOA,MAAOA,EAAOQ,UAAWA,EAAWM,sBAAuBf,OAAuB,KAC5K,kBAACrB,EAAD,CAAkBC,aArCD,SAAC8B,GACpB,IAAMJ,EAAOU,cACPd,EAAkB,sBAAOT,GAAP,CAAwB,CAAEiB,OAAMJ,UACxDZ,EAAmBQ,MAoCjB,yBAAKlB,UAAU,aACb,kNAKF,0BAAMC,SAAUmB,GACd,4BAAQpB,UAAU,4CAAlB,kB,YCnEOiC,UATI,kBACjB,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,mBACX,kBAAC,EAAD,U,mFCmBSC,EA3BH,kBACV,yBAAKpC,UAAS,aACZ,yBAAKA,UAAS,wBAA2BqC,KAAK,cAC5C,wBAAIrC,UAAU,iBACZ,wBAAIA,UAAU,aACZ,kBAAC,OAAD,CAAMsC,GAAG,KAAT,SAEF,wBAAItC,UAAU,aACZ,kBAAC,OAAD,CAAMsC,GAAG,WAAT,UAEF,wBAAItC,UAAU,aACZ,kBAAC,OAAD,CAAMsC,GAAG,cAAT,aAEF,wBAAItC,UAAU,aACZ,kBAAC,OAAD,CAAMsC,GAAG,YAAT,WAEF,wBAAItC,UAAU,aACZ,kBAAC,OAAD,CAAMsC,GAAG,YAAT,WAEF,wBAAItC,UAAU,aACZ,kBAAC,OAAD,CAAMsC,GAAG,WAAT,mBCiBKC,IAlCO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJ3C,mBAAS,iBAApC4C,EAD+B,KACpBC,EADoB,KAMtC,OAAIC,cAEA,yBAAKC,GAAG,OAAO5C,UAAS,YAAcyC,GACpC,yBAAKzC,UAAU,kBACb,4BAAQA,UAAS,wBAA2B6C,cAAY,YAAYjB,QAAS,WAPnFc,GAAa,SAAAI,GAAK,MAAU,kBAALA,EAAA,qCAQf,0BAAM9C,UAAS,qBACf,0BAAMA,UAAS,wBACf,0BAAMA,UAAS,wBACf,0BAAMA,UAAS,wBACf,0BAAMA,UAAS,WAAf,uBAGJ,kBAAC,EAAD,MACA,yBAAKA,UAAU,YAAYwC,KAI3B,oBAAOO,QACTC,mBAAS,UAEJ","file":"component---src-pages-fields-js-ce833b94e57d26581322.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { getCurrentUser, updateFields, getCurrentFields, createGUID } from '../util/storage'\n\n// eslint-disable-next-line react/prop-types\nfunction AddFieldNameForm({ addFieldName }) {\n  const [value, setValue] = useState(``)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (!value) {\n      return\n    }\n    addFieldName(value)\n    setValue(``)\n  }\n\n  return (\n    <form className=\"mb-5\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <input type=\"text\" className=\"input form-control\" placeholder=\"New Key\" value={value} onChange={e => setValue(e.target.value)} />\n      </div>\n      <button className=\"btn btn-primary btn-block text-uppercase\">Add new field type</button>\n    </form>\n  )\n}\n\nconst FieldNames = () => {\n  const [fieldNamesState, setfieldNamesState] = useState([])\n  useEffect(() => {\n    if (getCurrentFields().fields) {\n      setfieldNamesState(getCurrentFields().fields)\n    }\n  }, [])\n\n  console.log(fieldNamesState)\n\n  const addFieldName = (text) => {\n    const guid = createGUID()\n    const newfieldNamesState = [...fieldNamesState, { text, guid }]\n    setfieldNamesState(newfieldNamesState)\n  }\n\n  const removeFieldName = (index) => {\n    const newfieldNamesState = [...fieldNamesState]\n    newfieldNamesState.splice(index, 1)\n    setfieldNamesState(newfieldNamesState)\n  }\n\n  const saveFields = (e) => {\n    e.preventDefault()\n    updateFields({\n      guid: getCurrentUser().guid,\n      fields: fieldNamesState,\n    })\n  }\n\n  const FieldNamesInput = ({ fieldname, index }) => (\n    <div className=\"form-group row\">\n      <div className=\"col-10\">\n        <input className=\"form-control\" value={fieldname.text} onChange={saveFields} disabled />\n      </div>\n      <div className=\"col-2\">\n        <button className=\"btn btn-block btn-danger\" onClick={() => removeFieldName(index)}>\n          x\n        </button>\n      </div>\n    </div>\n  )\n\n  return (\n    <>\n      <h6>Field Types</h6>\n      {fieldNamesState ? fieldNamesState.map((fieldname, index) => <FieldNamesInput key={index} index={index} fieldname={fieldname} removeremoveFieldName={removeFieldName} />) : null}\n      <AddFieldNameForm addFieldName={addFieldName} />\n\n      <div className=\"help-text\">\n        <p>\n          Create as many field names as you want. This allows to keep key/value pairs nice and consistant everywhere. Once youre done, savie the fields below to synce them to the database.\n        </p>\n      </div>\n\n      <form onSubmit={saveFields}>\n        <button className=\"btn btn-primary btn-block text-uppercase\">Save Fields</button>\n      </form>\n    </>\n  )\n}\n\nexport default FieldNames\n\nFieldNames.propTypes = {\n  fieldname: PropTypes.string,\n  index: PropTypes.integer,\n  AddFieldNameForm: PropTypes.func.isRequired,\n}\n","import React from 'react'\n\nimport Layout from '../components/layout'\nimport LoginWrapper from '../components/LoginWrapper'\nimport FieldNames from '../components/FieldNames'\nimport SEO from '../components/seo'\n\nconst FieldsPage = () => (\n  <LoginWrapper>\n    <Layout>\n      <SEO title=\"Field Settings\" />\n      <FieldNames />\n    </Layout>\n  </LoginWrapper>\n)\n\nexport default FieldsPage\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Nav = () => (\n  <div className={`site-menu`}>\n    <nav className={`site-nav px-4 px-md-5`} role=\"navigation\">\n      <ul className=\"list-unstyled\">\n        <li className=\"menu-item\">\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li className=\"menu-item\">\n          <Link to=\"/about/\">About</Link>\n        </li>\n        <li className=\"menu-item\">\n          <Link to=\"/settings/\">Settings</Link>\n        </li>\n        <li className=\"menu-item\">\n          <Link to=\"/logout/\">Logout</Link>\n        </li>\n        <li className=\"menu-item\">\n          <Link to=\"/fields/\">Fields</Link>\n        </li>\n        <li className=\"menu-item\">\n          <Link to=\"/debug/\">Debug Menu</Link>\n        </li>\n      </ul>\n    </nav>\n  </div>\n)\n\nexport default Nav\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { isLoggedIn } from '../util/storage'\nimport { navigate } from 'gatsby'\nimport Nav from './Nav'\n\nconst LogginWrapper = ({ children }) => {\n  const [menuState, setMenuState] = useState(`nav-is-closed`)\n  const toggleMenu = () => {\n    setMenuState(state => (state === `nav-is-closed` ? `nav-is-active` : `nav-is-closed`))\n  }\n\n  if (isLoggedIn()) {\n    return (\n      <div id=\"page\" className={`viewport ${menuState}`}>\n        <div className=\"toggle-wrapper\">\n          <button className={`button navbar-toggler`} data-target=\"page-wrap\" onClick={() => toggleMenu()}>\n            <span className={`icon-bar top-bar`} />\n            <span className={`icon-bar middle-bar`} />\n            <span className={`icon-bar middle-bar`} />\n            <span className={`icon-bar bottom-bar`} />\n            <span className={`sr-only`}>Toggle navigation</span>\n          </button>\n        </div>\n        <Nav />\n        <div className=\"loggedIn\">{children}</div>\n      </div>\n    )\n  } else {\n    if (typeof window !== `undefined`) {\n      navigate(`/login`)\n    }\n    return null\n  }\n}\n\nLogginWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default LogginWrapper\n"],"sourceRoot":""}